#pragma once

#define UNUSED(x) (void)(x)

namespace ktl {

template <class T> struct remove_reference { typedef T type; };
template <class T> struct remove_reference<T&> { typedef T type; };
template <class T> struct remove_reference<T&&> { typedef T type; };
template <class T> using remove_reference_t = typename remove_reference<T>::type;

template <class T> struct remove_const          { typedef T type; };
template <class T> struct remove_const<const T> { typedef T type; };

// remove_volatile
template <class T> struct remove_volatile             { typedef T type; };
template <class T> struct remove_volatile<volatile T> { typedef T type; };

template <class T> 
struct remove_cv {
    typedef typename remove_volatile<typename remove_const<T>::type>::type type;
};

template <class T> 
struct decay {
private:
    typedef typename remove_reference<T>::type U;
public:
    typedef typename remove_cv<U>::type type;
};

// TODO: Support arrays and functions decaying to pointers.

template <class T> using decay_t = typename decay<T>::type;


template <class T, T v>
struct integral_constant {
    static constexpr T value = v;
    using value_type         = T;
    using type               = integral_constant;  // using injected-class-name
    constexpr operator value_type() const noexcept { return value; }
    constexpr value_type operator()() const noexcept { return value; }  // since c++14
};

using true_type  = integral_constant<bool, true>;
using false_type = integral_constant<bool, false>;

template <class T, class U>
struct is_same : false_type {};

template <class T>
struct is_same<T, T> : true_type {};

}  // namespace ktl